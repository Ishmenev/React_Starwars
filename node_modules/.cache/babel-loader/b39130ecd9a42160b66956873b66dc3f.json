{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n    this._imageBase = 'https://starwars-visualguide.com/assets/img';\n\n    this.getResource = async url => {\n      const res = await fetch(\"\".concat(this._apiBase).concat(url));\n\n      if (!res.ok) {\n        throw new Error(\"Its impossible, because we have received Error\");\n      }\n\n      return await res.json();\n    };\n\n    this.getAllPeople = async () => {\n      const res = await this.getResource(\"/people/\");\n      return res.results.map(this._transformPerson).slice(0.5);\n    };\n\n    this.getPerson = async id => {\n      const person = await this.getResource(\"/people/\".concat(id, \"/\"));\n      return this._transformPerson(person);\n    };\n\n    this.getAllPlanets = async () => {\n      const res = await this.getResource(\"/planets/\");\n      return res.results.map(this._transformPlanet).slice(0.5);\n    };\n\n    this.getPlanet = async id => {\n      const planet = await this.getResource(\"/planets/\".concat(id, \"/\"));\n      return this._transformPlanet(planet);\n    };\n\n    this.getAllStarships = async () => {\n      const res = await this.getResource(\"/starships/\");\n      return res.results.map(this._transformStarship).slice(0.5);\n    };\n\n    this.getStarship = async id => {\n      const starship = this.getResource(\"/starships/\".concat(id, \"/\"));\n      return this._transformStarship(starship);\n    };\n\n    this.getPersonImage = ({\n      id\n    }) => {\n      return \"\".concat(this._imageBase, \"/characters/\").concat(id, \".jpg\");\n    };\n\n    this.getStarshipImage = ({\n      id\n    }) => {\n      return \"\".concat(this._imageBase, \"/starships/\").concat(id, \".jpg\");\n    };\n\n    this.getPlanetImage = ({\n      id\n    }) => {\n      return \"\".concat(this._imageBase, \"/planets/\").concat(id, \".jpg\");\n    };\n\n    this._extractId = item => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      return item.url.match(idRegExp)[1];\n    };\n\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n\n    this._transformStarship = starship => {\n      return {\n        id: this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.costInCredits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargoCapacity\n      };\n    };\n\n    this._transformPerson = person => {\n      return {\n        id: this._extractId(person),\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birthYear,\n        eyeColor: person.eyeColor\n      };\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/ishmenevev/Desktop/Starwars/stars/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","_imageBase","getResource","url","res","fetch","ok","Error","json","getAllPeople","results","map","_transformPerson","slice","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getStarshipImage","getPlanetImage","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","gender","birthYear","eyeColor"],"mappings":"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","sourcesContent":["export default class SwapiService {\n\n    _apiBase = 'https://swapi.co/api';\n    _imageBase = 'https://starwars-visualguide.com/assets/img';\n\n    getResource = async (url) => {\n        const res = await fetch(`${this._apiBase}${url}`);\n\n        if (!res.ok) {\n            throw new Error(`Its impossible, because we have received Error`)\n        }\n    \n        return await res.json();\n    }\n\n    getAllPeople = async () => {\n    const res = await this.getResource(`/people/`);\n        return res.results.map(this._transformPerson).slice(0.5);\n    }\n\n    getPerson = async (id) => {\n    const person = await this.getResource(`/people/${id}/`);\n        return this._transformPerson(person);\n    }\n\n    getAllPlanets = async () => {\n    const res = await this.getResource(`/planets/`);\n        return res.results.map(this._transformPlanet).slice(0.5);\n    }\n\n    getPlanet = async (id) => {\n    const planet = await this.getResource(`/planets/${id}/`);\n        return this._transformPlanet(planet);\n    }\n\n    getAllStarships = async () => {\n    const res = await this.getResource(`/starships/`);\n        return res.results.map(this._transformStarship).slice(0.5);\n    }\n\n    getStarship = async (id) => {\n    const starship = this.getResource(`/starships/${id}/`);\n        return this._transformStarship(starship);\n    }\n\n    getPersonImage = ({id}) => {\n        return `${this._imageBase}/characters/${id}.jpg`;\n    }\n\n    getStarshipImage = ({id}) => {\n        return `${this._imageBase}/starships/${id}.jpg`;\n    }\n\n    getPlanetImage = ({id}) => {\n        return `${this._imageBase}/planets/${id}.jpg`;\n    }\n\n    _extractId = (item) => {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    }\n\n    _transformPlanet = (planet) => {\n        return {\n            id: this._extractId(planet),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        };\n    }\n\n    _transformStarship = (starship) => {\n        return {\n            id: this._extractId(starship),\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.costInCredits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargoCapacity\n        }\n    }\n\n    _transformPerson = (person) => {\n        return {\n            id: this._extractId(person),\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birthYear,\n            eyeColor: person.eyeColor\n        }\n    }\n        \n}\n"]},"metadata":{},"sourceType":"module"}